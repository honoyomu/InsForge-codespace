import { useState, useEffect, useMemo } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { AlertCircle } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/radix/Dialog';
import { Button } from '@/components/radix/Button';
import { Alert, AlertDescription } from '@/components/radix/Alert';
import { ScrollArea } from '@/components/radix/ScrollArea';
import { databaseService } from '@/features/database/services/database.service';
import { authService } from '@/features/auth/services/auth.service';
import { ColumnSchema } from '@/features/database/schema';
import { isAutoGeneratedField, buildDynamicSchema, getInitialValues } from '@/features/database';
import { FormField } from '@/features/database/components/FormField';
import { cn, validateEmail } from '@/lib/utils/utils';
import { useToast } from '@/lib/hooks/useToast';

interface RecordFormDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  tableName: string;
  schema: ColumnSchema[];
  editingRecord?: any;
  onSuccess?: () => void;
}

export function RecordFormDialog({
  open,
  onOpenChange,
  tableName,
  schema,
  editingRecord,
  onSuccess,
}: RecordFormDialogProps) {
  const [error, setError] = useState<string | null>(null);
  const queryClient = useQueryClient();
  const { showToast } = useToast();

  const displayFields = useMemo(() => {
    if (tableName === 'users' && !editingRecord) {
      const userFields = [
        { name: 'id', type: 'string', nullable: true, primary_key: true, default_value: null },
        { name: 'name', type: 'string', nullable: false, primary_key: false, default_value: null },
        { name: 'email', type: 'string', nullable: false, primary_key: false, default_value: null },
        {
          name: 'password',
          type: 'string',
          nullable: false,
          primary_key: false,
          default_value: null,
        },
      ];
      return userFields;
    }
    const filteredFields = schema.filter((field) => !isAutoGeneratedField(field));
    return filteredFields;
  }, [tableName, editingRecord, schema]);

  const dynamicSchema = useMemo(() => {
    const schema = buildDynamicSchema(displayFields);
    return schema;
  }, [displayFields]);

  const initialValues = useMemo(() => {
    const values = editingRecord || getInitialValues(displayFields);
    return values;
  }, [editingRecord, displayFields]);

  const form = useForm({
    resolver: zodResolver(dynamicSchema),
    defaultValues: initialValues,
  });

  useEffect(() => {
    if (editingRecord) {
      form.reset(editingRecord);
    } else {
      form.reset(initialValues);
    }
  }, [editingRecord, displayFields, schema, form, initialValues]);

  const createRecordMutation = useMutation({
    mutationFn: async (data: any) => {
      if (tableName === 'users') {
        if (!validateEmail(data.email)) {
          throw new Error('Invalid email format');
        }
        return authService.register(data.email, data.password, data.name, data.id);
      } else {
        return databaseService.createRecord(tableName, data);
      }
    },
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: ['records', tableName] });
      void queryClient.invalidateQueries({ queryKey: ['users'] });
      void queryClient.invalidateQueries({ queryKey: ['table', tableName] });
      onOpenChange(false);
      form.reset();
      setError(null);
      if (onSuccess) {
        onSuccess();
      }
      showToast('Record created successfully', 'success');
    },
    onError: (err: any) => {
      setError(err.message || 'Failed to create record');
    },
  });

  const updateRecordMutation = useMutation({
    mutationFn: async (data: any) => {
      if (tableName === 'users') {
        const updateData: any = { email: data.email };
        if (data.password) {
          updateData.password = data.password;
        }
        if (data.metadata) {
          updateData.metadata = data.metadata;
        }
        throw new Error('User updates are not supported yet');
      } else {
        return databaseService.updateRecord(tableName, editingRecord.id, data);
      }
    },
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: ['records', tableName] });
      void queryClient.invalidateQueries({ queryKey: ['users'] });
      void queryClient.invalidateQueries({ queryKey: ['table', tableName] });
      onOpenChange(false);
      form.reset();
      setError(null);
      if (onSuccess) {
        onSuccess();
      }
    },
    onError: (err: any) => {
      setError(err.message || 'Failed to update record');
    },
  });

  const handleSubmit = form.handleSubmit(
    async (data) => {
      try {
        if (editingRecord) {
          await updateRecordMutation.mutateAsync(data);
        } else {
          await createRecordMutation.mutateAsync(data);
        }
      } catch (err) {
        console.error('Form submission error:', err);
      }
    },
    (errors) => {
      console.error('Form validation errors:', errors);
    }
  );

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[640px] p-0 gap-0 overflow-hidden flex flex-col">
        <form onSubmit={(e) => void handleSubmit(e)} className="flex flex-col">
          <DialogHeader className="px-6 pt-6">
            <DialogTitle className="text-base font-semibold text-zinc-950">
              {editingRecord ? `Edit ${tableName} Record` : `Add Record`}
            </DialogTitle>
          </DialogHeader>

          <ScrollArea className="h-full max-h-[540px] overflow-auto">
            <div className="px-6 py-6 space-y-6">
              {displayFields.map((field) => (
                <FormField key={field.name} field={field} form={form} tableName={tableName} />
              ))}
            </div>
          </ScrollArea>

          {error && (
            <div className="px-6 pb-4 shrink-0">
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            </div>
          )}

          <DialogFooter className="px-6 py-6 gap-3 sm:justify-end border-t border-zinc-200 shrink-0">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              className="h-10 px-4"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={createRecordMutation.isPending || updateRecordMutation.isPending}
              className={cn(
                'h-10 px-4 bg-zinc-950 text-white hover:bg-zinc-800',
                (createRecordMutation.isPending || updateRecordMutation.isPending) && 'opacity-40'
              )}
            >
              {createRecordMutation.isPending || updateRecordMutation.isPending
                ? 'Saving...'
                : editingRecord
                  ? 'Update'
                  : 'Add Record'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
